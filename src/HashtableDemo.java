/*
 * @(#)HashtableDemo.java	1.00 Oct 25, 2004
 *
 * Copyright (c) 2003-2004 Waukesha County Technical College. All Rights Reserved.
 *
 * THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF 
 * THE ACADEMIC FREE LICENSE V2.0 ("AGREEMENT"). ANY USE, REPRODUCTION 
 * OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE 
 * OF THIS AGREEMENT. A COPY OF THE AGREEMENT MUST BE ATTACHED TO ANY
 * AND ALL ORIGINALS OR DERIVITIVES.
 */

import java.util.*;

/*******************************************************
 * Sample code to work with Hashtable class. A Hashtable is
 * a Map, but it is not the same as a HashMap. The main difference
 * is that a Hashtable is not threadsafe (not syncrhonized) and
 * HashMap does not provide either an Enumerator or an Iterator.
 */
public class HashtableDemo {

	public static void main(String[] args) {
		// Not declared polymorphically ... why?
		Hashtable names = new Hashtable();
		// First let's just store some objects (strings)
		//   ... notice that the keys do not have to be sequential
		names.put("444-444-4444","Jim Lombardo");
		String oldValue = (String)names.put("444-444-4444","Eric Clapton");
                
                String name = names.get("444-44-4444").toString();
		
		// Now let's store misc. stuff
		//   ... notice that the keys do not have to be the same object types
		Hashtable misc = new Hashtable();
		misc.put(new Integer(100),new Double(23.23));
		misc.put(new Integer(101),"A String.");
		misc.put(new Double(102.5),Calendar.getInstance());
		
		
		// Now let's just retrieve and output the stuff in both hashtables
		//   ... notice the use of an Enumeration vs. Iterator vs. for-loop
		// Why? Because Hashtables don't support Iterators. Furthermore,
		// Hashtables do not store objects in order. The storage location
		// is randomly allocated. Also, you can't use a for-next loop, because
		// Hashtables don't use indexes for storage locations. They use hashes,
		// which are generated by an algorithm.
		Enumeration enumNames = names.elements();
			Enumeration enumNamesKeys = names.keys();
		Enumeration enumMisc = misc.elements();
			Enumeration enumMiscKeys = misc.keys();
		
		while( enumNames.hasMoreElements() ) {
			Object objName = enumNames.nextElement();
			Object objKey = enumNamesKeys.nextElement();
			System.out.println("Output for names:");
			System.out.println("Key: " + objKey + ", Value: " + objName);
		}

		System.out.println("\n");

		while( enumMisc.hasMoreElements() ) {
			Object objMiscValue = enumMisc.nextElement();
			Object objMiscKey = enumMiscKeys.nextElement();
			System.out.println("Output for misc:");
			System.out.println("Key: " + objMiscKey + ", Value: " + objMiscValue);
		}
		
		// Now, let's just get a specific element value by using its key
		// as a search critera.
		System.out.println("\nThe name matching SSN 444-444-4444 is: " +
			names.get("444-444-4444")); // returns the value for this key
	}
}
